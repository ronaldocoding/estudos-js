/**
 * Como j√° mostrado em threads anteriores, existem diversas formas de se chamar
 * uma fun√ß√£o, seja diretamente no escopo global, a partir de um objeto ou at√©
 * mesmo por meio de outras fun√ß√µes.
 * 
 * Os m√©todos call() e apply() s√£o mais outras formas de se chamar fun√ß√µes em 
 * Javascript. Eles fazem a mesma coisa mas de uma forma diferente: aplicam 
 * uma fun√ß√£o, pertencente ao objeto do contexto l√©xico em que foi declarada, a
 * outro objeto.
 * 
 * Exemplo: definimos uma fun√ß√£o chamada getPreco() que recebe por par√¢metro o
 * valor do imposto e a moeda de um determinado produto e retorna uma string 
 * formatada do pre√ßo desse produto com desconto:
 */

function getPreco(imposto = 0, moeda = 'R$') {
    return `${moeda} ${this.preco * (1 - this.desconto) * (1 + imposto)}`
}

/**
 * Repare que getPreco() foi definida no escopo global, ou seja, as propriedades
 * "preco" e "desconto" devem pertencer a esse escopo.
 * 
 * Desse modo, antes de chamarmos essa fun√ß√£o no contexto l√©xico global, devemos
 * criar e definir os valores dessas propriedades: 
 */

global.preco = 20
global.desconto = 0.1

// Ao chamarmos getPreco(), no escopo global, temos como resultado o valor 20, 
// com desconto de 10%, imposto zero (padr√£o) e moeda Real(padr√£o):
console.log(getPreco()) // R$ 18

// E se quisermos aplicar essa fun√ß√£o getPreco() a outro objeto que n√£o seja o
// "global"? Basta usarmos call() ou apply().

/**
 * Para esse exemplo, definimos um objeto chamado "carro", com atributos 
 * hom√¥nimos √†s propriedades usadas em getPreco():
 */

const carro = { preco: 50000, desconto: 0.20 }

/**
 * Se os valores-padr√£o dos par√¢metros "imposto" e "moeda" forem suficientes, 
 * basta fazer isso:
 */

console.log(getPreco.call(carro)) // R$ 4000
console.log(getPreco.apply(carro)) // R$ 4000

/**
 * Caso contr√°rio, √© preciso se atentar √†s diferen√ßas entre call() e apply().
 */

// Ao usar call(), os argumentos da fun√ß√£o a ser chamada s√£o passados
// diretamente, cada um, como par√¢metros do m√©todo: 
// (inserir exemplo com pseudoc√≥digo)

// Ao usar apply(), os argumentos da fun√ß√£o a ser chamada s√£o passados
// todos dentro de um √∫nico array como par√¢metro do m√©todo:
// (inserir exemplo com pseudoc√≥digo)

// Sendo assim, usando call(), para 15% de desconto e moeda D√≥lar, ficaria 
// assim:
console.log(getPreco.call(carro, 0.15, '$')) // $ 46000

// E usando apply(), para os mesmos p√¢rametros anteriores, ficaria assim:
console.log(getPreco.apply(carro, [0.15, '$'])) // $ 46000

// Todos os c√≥digos de exemplo dessa thread e das anteriores est√£o dispon√≠veis
// nesse reposit√≥rio do meu github: https://github.com/ronaldocoding/estudos-js

/**
 * Essa foi a √∫ltima thread sobre fun√ß√µes, em espec√≠fico, as pr√≥ximas v√£o ser
 * sobre objeto (orienta√ß√£o √† objeto) e array.
 * 
 * At√© amanh√£ ü§ì‚úå
 */